"""ISO8601 Date values"""
scalar Date

"""A Float or a String"""
scalar GraphQLStringOrFloat

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mutation {
  update_Projects_batch(data: [update_Projects_input!], filter: Projects_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Projects!]!
  update_Projects_item(data: update_Projects_input!, id: ID!): Projects
  update_Projects_items(data: update_Projects_input!, filter: Projects_filter, ids: [ID]!, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Projects!]!
}

type Projects {
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  end: Date!
  end_func: datetime_functions
  id: ID!
  name: String
  start: Date
  start_func: datetime_functions
  status: String
  user_created: String
  user_updated: String
}

type Projects_aggregated {
  avg: Projects_aggregated_fields
  avgDistinct: Projects_aggregated_fields
  count: Projects_aggregated_count
  countAll: Int
  countDistinct: Projects_aggregated_count
  group: JSON
  max: Projects_aggregated_fields
  min: Projects_aggregated_fields
  sum: Projects_aggregated_fields
  sumDistinct: Projects_aggregated_fields
}

type Projects_aggregated_count {
  date_created: Int
  date_updated: Int
  end: Int
  id: Int
  name: Int
  start: Int
  status: Int
  user_created: Int
  user_updated: Int
}

type Projects_aggregated_fields {
  id: Float
}

input Projects_filter {
  _and: [Projects_filter]
  _or: [Projects_filter]
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  end: date_filter_operators
  end_func: datetime_function_filter_operators
  id: number_filter_operators
  name: string_filter_operators
  start: date_filter_operators
  start_func: datetime_function_filter_operators
  status: string_filter_operators
  user_created: string_filter_operators
  user_updated: string_filter_operators
}

type Query {
  Projects(filter: Projects_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Projects!]!
  Projects_aggregated(filter: Projects_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Projects_aggregated!]!
  Projects_by_id(id: ID!): Projects
}

input date_filter_operators {
  _between: [GraphQLStringOrFloat]
  _eq: String
  _gt: String
  _gte: String
  _in: [String]
  _lt: String
  _lte: String
  _nbetween: [GraphQLStringOrFloat]
  _neq: String
  _nin: [String]
  _nnull: Boolean
  _null: Boolean
}

input datetime_function_filter_operators {
  day: number_filter_operators
  hour: number_filter_operators
  minute: number_filter_operators
  month: number_filter_operators
  second: number_filter_operators
  week: number_filter_operators
  weekday: number_filter_operators
  year: number_filter_operators
}

type datetime_functions {
  day: Int
  hour: Int
  minute: Int
  month: Int
  second: Int
  week: Int
  weekday: Int
  year: Int
}

input number_filter_operators {
  _between: [GraphQLStringOrFloat]
  _eq: GraphQLStringOrFloat
  _gt: GraphQLStringOrFloat
  _gte: GraphQLStringOrFloat
  _in: [GraphQLStringOrFloat]
  _lt: GraphQLStringOrFloat
  _lte: GraphQLStringOrFloat
  _nbetween: [GraphQLStringOrFloat]
  _neq: GraphQLStringOrFloat
  _nin: [GraphQLStringOrFloat]
  _nnull: Boolean
  _null: Boolean
}

input string_filter_operators {
  _contains: String
  _empty: Boolean
  _ends_with: String
  _eq: String
  _icontains: String
  _in: [String]
  _ncontains: String
  _nempty: Boolean
  _nends_with: String
  _neq: String
  _nin: [String]
  _nnull: Boolean
  _nstarts_with: String
  _null: Boolean
  _starts_with: String
}

input update_Projects_input {
  date_created: Date
  date_updated: Date
  end: Date
  id: ID
  name: String
  start: Date
  status: String
  user_created: String
  user_updated: String
}
