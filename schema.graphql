"""ISO8601 Date values"""
scalar Date

"""A Float or a String"""
scalar GraphQLStringOrFloat

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mutation {
  create_Projects_item(data: create_Projects_input!): Projects
  create_Projects_items(data: [create_Projects_input!], filter: Projects_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Projects!]!
  create_todos_item(data: create_todos_input!): todos
  create_todos_items(data: [create_todos_input!], filter: todos_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [todos!]!
  delete_Projects_item(id: ID!): delete_one
  delete_Projects_items(ids: [ID]!): delete_many
  update_Projects_batch(data: [update_Projects_input!], filter: Projects_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Projects!]!
  update_Projects_item(data: update_Projects_input!, id: ID!): Projects
  update_Projects_items(data: update_Projects_input!, filter: Projects_filter, ids: [ID]!, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Projects!]!
}

type Projects {
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  favorite: Boolean
  id: ID!
  name: String
  user_created: String
  user_updated: String
}

type Projects_aggregated {
  avg: Projects_aggregated_fields
  avgDistinct: Projects_aggregated_fields
  count: Projects_aggregated_count
  countAll: Int
  countDistinct: Projects_aggregated_count
  group: JSON
  max: Projects_aggregated_fields
  min: Projects_aggregated_fields
  sum: Projects_aggregated_fields
  sumDistinct: Projects_aggregated_fields
}

type Projects_aggregated_count {
  date_created: Int
  date_updated: Int
  favorite: Int
  id: Int
  name: Int
  user_created: Int
  user_updated: Int
}

type Projects_aggregated_fields {
  id: Float
}

input Projects_filter {
  _and: [Projects_filter]
  _or: [Projects_filter]
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  favorite: boolean_filter_operators
  id: number_filter_operators
  name: string_filter_operators
  user_created: string_filter_operators
  user_updated: string_filter_operators
}

type Query {
  Projects(filter: Projects_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Projects!]!
  Projects_aggregated(filter: Projects_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Projects_aggregated!]!
  Projects_by_id(id: ID!): Projects
  apps(filter: apps_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [apps!]!
  apps_aggregated(filter: apps_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [apps_aggregated!]!
  apps_by_id(id: ID!): apps
  apps_todos(filter: apps_todos_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [apps_todos!]!
  apps_todos_aggregated(filter: apps_todos_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [apps_todos_aggregated!]!
  apps_todos_by_id(id: ID!): apps_todos
  apps_views(filter: apps_views_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [apps_views!]!
  apps_views_aggregated(filter: apps_views_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [apps_views_aggregated!]!
  apps_views_by_id(id: ID!): apps_views
  todos(filter: todos_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [todos!]!
  todos_aggregated(filter: todos_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [todos_aggregated!]!
  todos_by_id(id: ID!): todos
  views(filter: views_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [views!]!
  views_aggregated(filter: views_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [views_aggregated!]!
  views_by_id(id: ID!): views
  views_collections(filter: views_collections_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [views_collections!]!
  views_collections_aggregated(filter: views_collections_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [views_collections_aggregated!]!
  views_collections_by_id(id: ID!): views_collections
}

type apps {
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  id: ID!
  image: String
  name: String
  sort: Int
  todos(filter: apps_todos_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [apps_todos]
  todos_func: count_functions
  user_created: String
  user_updated: String
  views(filter: apps_views_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [apps_views]
  views_func: count_functions
}

type apps_aggregated {
  avg: apps_aggregated_fields
  avgDistinct: apps_aggregated_fields
  count: apps_aggregated_count
  countAll: Int
  countDistinct: apps_aggregated_count
  group: JSON
  max: apps_aggregated_fields
  min: apps_aggregated_fields
  sum: apps_aggregated_fields
  sumDistinct: apps_aggregated_fields
}

type apps_aggregated_count {
  date_created: Int
  date_updated: Int
  id: Int
  image: Int
  name: Int
  sort: Int
  todos: Int
  user_created: Int
  user_updated: Int
  views: Int
}

type apps_aggregated_fields {
  sort: Float
}

input apps_filter {
  _and: [apps_filter]
  _or: [apps_filter]
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  id: string_filter_operators
  image: string_filter_operators
  name: string_filter_operators
  sort: number_filter_operators
  todos: apps_todos_filter
  todos_func: count_function_filter_operators
  user_created: string_filter_operators
  user_updated: string_filter_operators
  views: apps_views_filter
  views_func: count_function_filter_operators
}

type apps_todos {
  apps_id(filter: apps_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): apps
  id: ID!
  todos_id(filter: todos_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): todos
}

type apps_todos_aggregated {
  avg: apps_todos_aggregated_fields
  avgDistinct: apps_todos_aggregated_fields
  count: apps_todos_aggregated_count
  countAll: Int
  countDistinct: apps_todos_aggregated_count
  group: JSON
  max: apps_todos_aggregated_fields
  min: apps_todos_aggregated_fields
  sum: apps_todos_aggregated_fields
  sumDistinct: apps_todos_aggregated_fields
}

type apps_todos_aggregated_count {
  apps_id: Int
  id: Int
  todos_id: Int
}

type apps_todos_aggregated_fields {
  id: Float
}

input apps_todos_filter {
  _and: [apps_todos_filter]
  _or: [apps_todos_filter]
  apps_id: apps_filter
  id: number_filter_operators
  todos_id: todos_filter
}

type apps_views {
  apps_id(filter: apps_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): apps
  id: ID!
  views_id(filter: views_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): views
}

type apps_views_aggregated {
  avg: apps_views_aggregated_fields
  avgDistinct: apps_views_aggregated_fields
  count: apps_views_aggregated_count
  countAll: Int
  countDistinct: apps_views_aggregated_count
  group: JSON
  max: apps_views_aggregated_fields
  min: apps_views_aggregated_fields
  sum: apps_views_aggregated_fields
  sumDistinct: apps_views_aggregated_fields
}

type apps_views_aggregated_count {
  apps_id: Int
  id: Int
  views_id: Int
}

type apps_views_aggregated_fields {
  id: Float
}

input apps_views_filter {
  _and: [apps_views_filter]
  _or: [apps_views_filter]
  apps_id: apps_filter
  id: number_filter_operators
  views_id: views_filter
}

input boolean_filter_operators {
  _eq: Boolean
  _neq: Boolean
  _nnull: Boolean
  _null: Boolean
}

input count_function_filter_operators {
  count: number_filter_operators
}

type count_functions {
  count: Int
}

input create_Projects_input {
  date_created: Date
  date_updated: Date
  favorite: Boolean
  id: ID
  name: String
  user_created: String
  user_updated: String
}

input create_todos_input {
  date_created: Date
  date_updated: Date
  id: ID
  name: String
  user_created: String
  user_updated: String
}

input date_filter_operators {
  _between: [GraphQLStringOrFloat]
  _eq: String
  _gt: String
  _gte: String
  _in: [String]
  _lt: String
  _lte: String
  _nbetween: [GraphQLStringOrFloat]
  _neq: String
  _nin: [String]
  _nnull: Boolean
  _null: Boolean
}

input datetime_function_filter_operators {
  day: number_filter_operators
  hour: number_filter_operators
  minute: number_filter_operators
  month: number_filter_operators
  second: number_filter_operators
  week: number_filter_operators
  weekday: number_filter_operators
  year: number_filter_operators
}

type datetime_functions {
  day: Int
  hour: Int
  minute: Int
  month: Int
  second: Int
  week: Int
  weekday: Int
  year: Int
}

type delete_many {
  ids: [ID]!
}

type delete_one {
  id: ID!
}

input number_filter_operators {
  _between: [GraphQLStringOrFloat]
  _eq: GraphQLStringOrFloat
  _gt: GraphQLStringOrFloat
  _gte: GraphQLStringOrFloat
  _in: [GraphQLStringOrFloat]
  _lt: GraphQLStringOrFloat
  _lte: GraphQLStringOrFloat
  _nbetween: [GraphQLStringOrFloat]
  _neq: GraphQLStringOrFloat
  _nin: [GraphQLStringOrFloat]
  _nnull: Boolean
  _null: Boolean
}

input string_filter_operators {
  _contains: String
  _empty: Boolean
  _ends_with: String
  _eq: String
  _icontains: String
  _in: [String]
  _ncontains: String
  _nempty: Boolean
  _nends_with: String
  _neq: String
  _nin: [String]
  _nnull: Boolean
  _nstarts_with: String
  _null: Boolean
  _starts_with: String
}

type todos {
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  id: ID!
  name: String
  user_created: String
  user_updated: String
}

type todos_aggregated {
  count: todos_aggregated_count
  countAll: Int
  countDistinct: todos_aggregated_count
  group: JSON
}

type todos_aggregated_count {
  date_created: Int
  date_updated: Int
  id: Int
  name: Int
  user_created: Int
  user_updated: Int
}

input todos_filter {
  _and: [todos_filter]
  _or: [todos_filter]
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  id: string_filter_operators
  name: string_filter_operators
  user_created: string_filter_operators
  user_updated: string_filter_operators
}

input update_Projects_input {
  date_created: Date
  date_updated: Date
  favorite: Boolean
  id: ID
  name: String
  user_created: String
  user_updated: String
}

type views {
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  id: ID!
  name: String
  user_created: String
  user_updated: String
}

type views_aggregated {
  count: views_aggregated_count
  countAll: Int
  countDistinct: views_aggregated_count
  group: JSON
}

type views_aggregated_count {
  date_created: Int
  date_updated: Int
  id: Int
  name: Int
  user_created: Int
  user_updated: Int
}

type views_collections {
  collection: String
  id: ID!
  item: views_collections_item_union
  views_id(filter: views_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): views
}

type views_collections_aggregated {
  avg: views_collections_aggregated_fields
  avgDistinct: views_collections_aggregated_fields
  count: views_collections_aggregated_count
  countAll: Int
  countDistinct: views_collections_aggregated_count
  group: JSON
  max: views_collections_aggregated_fields
  min: views_collections_aggregated_fields
  sum: views_collections_aggregated_fields
  sumDistinct: views_collections_aggregated_fields
}

type views_collections_aggregated_count {
  collection: Int
  id: Int
  item: Int
  views_id: Int
}

type views_collections_aggregated_fields {
  id: Float
}

input views_collections_filter {
  _and: [views_collections_filter]
  _or: [views_collections_filter]
  collection: string_filter_operators
  id: number_filter_operators
  item__todos: todos_filter
  views_id: views_filter
}

union views_collections_item_union = todos

input views_filter {
  _and: [views_filter]
  _or: [views_filter]
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  id: string_filter_operators
  name: string_filter_operators
  user_created: string_filter_operators
  user_updated: string_filter_operators
}
